# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:    
  unit-test-backend:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/php:8.1.9-node
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
          MYSQL_DATABASE: laravel
      # - image: cimg/node:18.7.0

    steps:
      - checkout
      - run:
          name: Create connect between mysql and laravel
          command: sudo docker-php-ext-install pdo_mysql
            # sudo docker-php-ext-install pdo_mysql
            # sudo docker-php-ext-enable pdo_mysql 
      # - run: sudo apt-get update && sudo apt-get install npm
      # - run: 
      #     name: Create database
      #     command: |
      #       mkdir -p database
      #       touch database/laravel.sqlite 

      # - run: 
      #    name: Create file env
      #    command: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - run: 
          name: Run composer
          command: composer install

      - run: php artisan migrate:fresh --seed --env=testing

      - run: 
          name: install init node_modules test font-end
          command: |
            yarn install
            yarn run build
      - run: 
          name: Execute unit test
          # command: php artisan test --testsuite=Feature 'tests/Feature/Http/Controllers/PostControllerTest.php'
          # ./vendor/bin/phpunit
          # php artisan test --testsuite=Feature
          command: |
            mkdir -p ~/reports
            phpdbg -qrr ./vendor/bin/phpunit --log-junit ./reports/junit.xml tests

  unit-test-frontend:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/php:8.1.9-node
    steps:
      - checkout
      - run: 
          name: Run composer
          command: composer install
      - run: 
          name: install init node_modules test font-end
          command: |
            yarn install
            yarn run build
      - run: 
          name: install init node_modules test font-end
          command: npm run test run --coverage 

  lint-frontend:
    docker:
        # docker image mà ta sử dụng
      - image: cimg/php:8.1.9-node
    steps:
      - checkout
      - run: 
          name: Run yarn
          command: yarn install
      - run: 
          name: Setup and run lint
          command: yarn lint

  lint-backend:
    docker:
        # docker image mà ta sử dụng
      - image: cimg/php:8.1.9-node
    steps:
      - checkout
      - run: 
          name: Run composer
          command: composer install
      - run: 
          name: Setup and run lint
          command: |
            mkdir -p ./reports/junit
            ./vendor/bin/php-cs-fixer fix --dry-run --format junit --config .php-cs-fixer.dist.php
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
  deploy:
    machine:
      enabled: true
    steps:
      - run:
            name: Deploy Over SSH
            command: |
              ssh $SSH_USER@$SSH_HOST "cd /srv/qa.primelabo.com.vn/Testcode-Demo-CI && git pull"

workflows:
  build-and-test:
    jobs:
      - lint-frontend
      - lint-backend
      - unit-test-frontend:
          requires:
            - lint-frontend
            - lint-backend
      - unit-test-backend
          # requires:
          #   - lint-frontend
          #   - lint-backend
      - deploy:
          requires:
            - unit-test-frontend
            - unit-test-backend
          filters:
            branches:
              only: main  # only deploy on the main branch
